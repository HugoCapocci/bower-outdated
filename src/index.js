// Generated by CoffeeScript 1.12.7
(function() {
  var Promise, _, ansiTrim, bower, bowerConf, bowerDependencies, checkInstalledVersions, clearProcessingMessage, colors, displayAll, displayProcessingMessage, error, fs, makePretty, mapDependencyFromConfig, path, processingMessage, semver, table;

  process.bin = process.title = 'bower-outdated';

  _ = require('lodash');

  bower = require('bower');

  Promise = require('bluebird');

  colors = require('ansicolors');

  table = require('text-table');

  semver = require('semver');

  fs = require('fs');

  displayAll = false;

  path = process.cwd() + '/';

  try {
    bowerConf = require(path + 'bower.json');
  } catch (error1) {
    error = error1;
    console.error(colors.red("Cannot find " + path + "bower.json config file."));
    process.exit(1);
  }

  displayProcessingMessage = function(message) {
    var P, x;
    P = ['\\', '|', '/', '-'];
    x = 0;
    return setInterval(function() {
      process.stdout.write('\r' + colors.cyan(P[x++]) + ' ' + message);
      return x &= 3;
    }, 250);
  };

  clearProcessingMessage = function(processingMessage) {
    clearInterval(processingMessage);
    return process.stdout.write('\r');
  };

  checkInstalledVersions = function() {
    var bowerRc, src;
    src = path + 'bower_components';
    try {
      bowerRc = JSON.parse(fs.readFileSync(path + '.bowerrc'));
      src = bowerRc.directory;
    } catch (error1) {
      console.log(colors.red('No .bowerrc file found, use defaut configuration'));
    }
    return Promise.map(bowerDependencies, function(bowerDependency) {
      return new Promise(function(resolve, reject) {
        var file, name;
        name = bowerDependency.installedName ? bowerDependency.installedName : bowerDependency.name;
        file = src + '/' + name + '/.bower.json';
        return fs.readFile(file, function(error, data) {
          if (!error) {
            bowerDependency.actualVersion = JSON.parse(data).version;
          }
          return resolve();
        });
      });
    });
  };

  ansiTrim = function(str) {
    var r;
    r = new RegExp('\x1b(?:\\[(?:\\d+[ABCDEFGJKSTm]|\\d+;\\d+[Hfm]|\\d+;\\d+;\\d+m|6n|s|u|\\?25[lh])|\\w)', 'g');
    return str.replace(r, '');
  };

  makePretty = function(arg) {
    var actualVersion, columns, latestVersion, name, wantedVersion;
    name = arg.name, actualVersion = arg.actualVersion, wantedVersion = arg.wantedVersion, latestVersion = arg.latestVersion;
    if (!displayAll && (actualVersion === latestVersion)) {
      return;
    }
    columns = [name, actualVersion || 'MISSING', wantedVersion, latestVersion];
    columns[0] = colors[semver.satisfies(actualVersion, wantedVersion) ? 'yellow' : 'red'](columns[0]);
    if (columns[2] === 'git') {
      columns[2] = colors.green(columns[2]);
    } else {
      columns[2] = colors.green(semver.validRange(columns[2]));
    }
    columns[3] = colors.magenta(columns[3]);
    return columns;
  };

  mapDependencyFromConfig = function(value, key) {
    var installedName, sharpIndex;
    sharpIndex = value.indexOf('#');
    if (sharpIndex !== -1) {
      if (_.startsWith(value, 'git')) {
        value = 'git';
      } else {
        installedName = key;
        key = value.substring(0, sharpIndex);
        value = value.substring(sharpIndex + 1);
      }
    }
    return {
      name: key,
      wantedVersion: value,
      installedName: installedName != null ? installedName : void 0
    };
  };

  bowerDependencies = _.map(bowerConf.dependencies, mapDependencyFromConfig);

  bowerDependencies = bowerDependencies.concat(_.map(bowerConf.devDependencies, mapDependencyFromConfig));

  processingMessage = displayProcessingMessage('check latests dependencies');

  Promise.map(bowerDependencies, function(bowerDependency) {
    return new Promise(function(resolve, reject) {
      if (bowerDependency.wantedVersion === 'git') {
        bowerDependency.latestVersion = 'git';
        return resolve();
      }
      return bower.commands.info(bowerDependency.name).on('end', function(results) {
        bowerDependency.latestVersion = results.latest.version;
        return resolve();
      });
    });
  }).then(function() {
    clearProcessingMessage(processingMessage);
    processingMessage = displayProcessingMessage('check installed dependencies');
    return checkInstalledVersions();
  }).then(function() {
    var headers, outTable, tableOpts;
    clearProcessingMessage(processingMessage);
    headers = ['Package', 'Current', 'Wanted', 'Latest'];
    outTable = [headers].concat(_.compact(bowerDependencies.map(makePretty)));
    tableOpts = {
      align: ['l', 'r', 'r', 'r'],
      stringLength: function(s) {
        return ansiTrim(s).length;
      }
    };
    console.log(table(outTable, tableOpts));
  })["catch"](function(error) {
    return console.error(error);
  });

}).call(this);
